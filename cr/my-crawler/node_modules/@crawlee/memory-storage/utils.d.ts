import type * as storage from '@crawlee/types';
import type { InternalKeyRecord } from './resource-clients/key-value-store';
import type { InternalRequest } from './resource-clients/request-queue';
/**
 * Removes all properties with a null value
 * from the provided object.
 */
export declare function purgeNullsFromObject<T>(object: T): T;
/**
 * Creates a standard request ID (same as Platform).
 */
export declare function uniqueKeyToRequestId(uniqueKey: string): string;
export declare function isBuffer(value: unknown): boolean;
export declare function isStream(value: unknown): boolean;
export declare const memoryStorageLog: import("@apify/log").Log;
export interface WorkerData {
    datasetsDirectory: string;
    keyValueStoresDirectory: string;
    requestQueuesDirectory: string;
}
export declare type WorkerReceivedMessage = WorkerUpdateMetadataMessage | WorkerUpdateEntriesMessage | WorkerDeleteEntryMessage;
export declare type WorkerUpdateMetadataMessage = MetadataUpdate<'datasets', storage.DatasetInfo> | MetadataUpdate<'keyValueStores', storage.KeyValueStoreInfo> | MetadataUpdate<'requestQueues', storage.RequestQueueInfo>;
export declare type WorkerUpdateEntriesMessage = EntriesUpdate<'datasets', [string, storage.Dictionary][]> | EntriesUpdate<'keyValueStores', KeyValueStoreItemData> | EntriesUpdate<'requestQueues', InternalRequest>;
export declare type WorkerDeleteEntryMessage = EntryDelete<'requestQueues'>;
declare type EntityType = 'datasets' | 'keyValueStores' | 'requestQueues';
interface MetadataUpdate<Type extends EntityType, DataType> {
    entityType: Type;
    id: string;
    action: 'update-metadata';
    entityDirectory: string;
    data: DataType;
    writeMetadata: boolean;
}
interface EntriesUpdate<Type extends EntityType, DataType> {
    entityType: Type;
    id: string;
    action: 'update-entries';
    entityDirectory: string;
    data: DataType;
    writeMetadata: boolean;
}
interface EntryDelete<Type extends EntityType> {
    entityType: Type;
    id: string;
    action: 'delete-entry';
    entityDirectory: string;
    writeMetadata: boolean;
    data: {
        id: string;
    };
}
interface KeyValueStoreItemData {
    action: 'set' | 'delete';
    record: InternalKeyRecord;
}
export {};
//# sourceMappingURL=utils.d.ts.map