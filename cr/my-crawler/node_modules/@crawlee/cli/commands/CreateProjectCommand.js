"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreateProjectCommand = void 0;
const tslib_1 = require("tslib");
const node_fs_1 = require("node:fs");
const node_path_1 = require("node:path");
const node_child_process_1 = require("node:child_process");
const inquirer_1 = require("inquirer");
const ansi_colors_1 = tslib_1.__importDefault(require("ansi-colors"));
const templates_1 = require("@crawlee/templates");
const fs_extra_1 = require("fs-extra");
const fs_1 = require("fs");
const path_1 = require("path");
function validateProjectName(name) {
    if (name.length === 0) {
        throw new Error('The project name cannot be empty string.');
    }
}
function rewrite(path, replacer) {
    try {
        const file = (0, fs_1.readFileSync)(path).toString();
        const replaced = replacer(file);
        (0, fs_1.writeFileSync)(path, replaced);
    }
    catch {
        // not found
    }
}
class CreateProjectCommand {
    constructor() {
        Object.defineProperty(this, "command", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 'create [project-name]'
        });
        Object.defineProperty(this, "describe", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: 'Creates a new Crawlee project directory from a selected boilerplate template.'
        });
        Object.defineProperty(this, "builder", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async (args) => {
                const manifest = await (0, templates_1.fetchManifest)();
                const choices = manifest.templates.map((t) => t.name);
                args.positional('project-name', {
                    describe: 'Name of the new project folder.',
                });
                args.option('template', {
                    alias: 't',
                    choices,
                    describe: 'Template for the project. If not provided, the command will prompt for it.',
                });
                return args;
            }
        });
    }
    /**
     * @inheritDoc
     */
    async handler(args) {
        let { projectName, template } = args;
        // Check proper format of projectName
        if (!projectName) {
            const projectNamePrompt = await (0, inquirer_1.prompt)([{
                    name: 'projectName',
                    message: 'Name of the new project folder:',
                    type: 'input',
                    validate: (promptText) => {
                        try {
                            validateProjectName(promptText);
                        }
                        catch (err) {
                            return err.message;
                        }
                        return true;
                    },
                }]);
            ({ projectName } = projectNamePrompt);
        }
        else {
            validateProjectName(projectName);
        }
        const manifest = await (0, templates_1.fetchManifest)();
        const choices = manifest.templates.map((t) => ({
            value: t.name,
            name: t.description,
        }));
        if (!template) {
            const answer = await (0, inquirer_1.prompt)([{
                    type: 'list',
                    name: 'template',
                    message: 'Please select the template for your new Crawlee project',
                    default: choices[0],
                    choices,
                }]);
            template = answer.template;
        }
        const projectDir = (0, node_path_1.join)(process.cwd(), projectName);
        // Create project directory structure
        try {
            (0, node_fs_1.mkdirSync)(projectDir);
        }
        catch (err) {
            if (err.code && err.code === 'EEXIST') {
                // eslint-disable-next-line no-console
                console.error(`Cannot create new Crawlee project, directory '${projectName}' already exists.`);
                return;
            }
            throw err;
        }
        await (0, fs_extra_1.copy)(require.resolve('@crawlee/templates').replace('index.js', `templates/${template}`), projectDir);
        rewrite((0, path_1.resolve)(projectDir, 'package.json'), (pkg) => pkg.replace(/"name": "[\w-]+"/, `"name": "${projectName}"`));
        // Run npm install in project dir.
        const npm = /^win/.test(process.platform) ? 'npm.cmd' : 'npm';
        (0, node_child_process_1.execSync)(`${npm} install`, { cwd: projectDir, stdio: 'inherit' });
        // eslint-disable-next-line no-console
        console.log(ansi_colors_1.default.green(`Project ${projectName} was created. To run it, run "cd ${projectName}" and "npm start".`));
    }
}
exports.CreateProjectCommand = CreateProjectCommand;
//# sourceMappingURL=CreateProjectCommand.js.map